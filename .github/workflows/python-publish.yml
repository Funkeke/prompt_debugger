name: Multi-platform Build and Packaging
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-package:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [macos-latest, macos-arm64, macos-arm64e]
        architecture: [x86_64, arm64, arm64e]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.os }}${{ matrix.architecture }}
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        architecture: '${{ matrix.architecture }}' # Set architecture for macOS
    - name: Install dependencies
      run: |
        pip install --user -r requirements.txt
        # 添加其他依赖安装命令
    - name: Build and Package for ${{ matrix.os }}${{ matrix.architecture }}
      run: |
        # 针对Windows的构建命令
        python setup.py sdist bdist_wheel
        
        # 针对macOS (Intel)的构建命令
        python -m pip install wheel
        pyinstaller -w -F main.py -n="prompt debugger" -i logo.png --clean
        
        # 针对macOS (M1)的构建命令
        pyinstaller -w -F main.py -n="prompt debugger" -i logo.png --clean
        
        # 针对macOS (M2)的构建命令
        pyinstaller -w -F main.py -n="prompt debugger" -i logo.png --clean
        # 注意：macOS (M1)和macOS (M2)可能需要使用特定版本的PyInstaller

    # 上传生成的二进制文件到 artifacts 存储
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-${{ matrix.architecture }}-binary
        path: dist/
